（Japanese follows English/ 日本語は下記をご覧ください）

This ViewController has been written in Swift for an iPhone App.
Unfortunately it is not known what this code does and there seem to be some concerns about the code quality.

a) Please describe briefly what this ViewController is doing.
b) Please list all your points of how this code can be improved. 

===
class ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {

    var tasks: [TodoTask] = []

    enum Taskstate {
        case todo
        case done
    }

    struct TodoTask {
        let name: String
        var isImportant: Bool
        let state: Taskstate
    }

    @IBOutlet var tableView: UITableView! {
        didSet {
            tableView.translatesAutoresizingMaskIntoConstraints = false
        }
    }

    // Data Source
    func numberOfSections(in tableView: UITableView) -> Int {
        return 2
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {

        if section == 0 {
            return tasks.filter { $0.state == Taskstate.todo }.count
        } else {
            return tasks.filter { $0.state == Taskstate.done }.count
        }
    }

    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        if section == 0 {
            return "Todos"
        } else if section == 1 {
            return "Done"
        }
        return "-"
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

        if indexPath.section == 0 {
            let todos = tasks.filter { $0.state == Taskstate.todo }
            let item = todos[indexPath.row]

            if item.isImportant {
                let ti = UITableViewCell(style: UITableViewCell.CellStyle.subtitle, reuseIdentifier: nil)
                ti.textLabel?.text = item.name
                ti.detailTextLabel?.text = "Important"
                return ti
            } else {
                let t = UITableViewCell.init(style: UITableViewCell.CellStyle.default, reuseIdentifier: nil)
                t.textLabel?.text = item.name
                return t
            }
        } else {
            let dones = tasks.filter { $0.state == Taskstate.done }
            let item = dones[indexPath.row]

            if item.isImportant {
                let b = UITableViewCell(style: UITableViewCell.CellStyle.subtitle, reuseIdentifier: nil)
                b.textLabel?.text = item.name
                b.detailTextLabel?.text = "Important"
                return b
            } else {
                let c = UITableViewCell.init(style: UITableViewCell.CellStyle.default, reuseIdentifier: nil)
                c.textLabel?.text = item.name
                return c
            }
        }
    }

    override func viewDidLoad() {
        tableView.dataSource = self

        tableView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        tableView.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true

        tasks = NetworkManager.fetchModels()

        tableView.delegate = self
    }

    // Delegate
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {

        if indexPath.section == 0 {
            let todos = tasks.filter { $0.state == Taskstate.todo }
            let item = todos[indexPath.item]
            let index = tasks.index(where: {$0.name == item.name})!
            let task = tasks.remove(at: index)
            let updatedTask = TodoTask.init(name: task.name, isImportant: task.isImportant, state: .done)
            tasks.insert(updatedTask, at: index)
        } else {
            let dones = tasks.filter { $0.state == Taskstate.done }
            let item = dones[indexPath.item]
            let index = tasks.index(where: {$0.name == item.name})!
            let task = tasks.remove(at: index)
            let updatedTask = TodoTask.init(name: task.name, isImportant: task.isImportant, state: .todo)
            tasks.insert(updatedTask, at: index)
        }

        tableView.reloadData()
    }
}